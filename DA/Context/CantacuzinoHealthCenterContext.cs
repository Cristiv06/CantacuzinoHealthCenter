// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using DA.Entities;
using Microsoft.EntityFrameworkCore;

namespace DA.Context;

public partial class CantacuzinoHealthCenterContext : DbContext
{
    public CantacuzinoHealthCenterContext(DbContextOptions<CantacuzinoHealthCenterContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentDocument> AppointmentDocuments { get; set; }

    public virtual DbSet<AppointmentInfo> AppointmentInfos { get; set; }

    public virtual DbSet<Doctor> Doctors { get; set; }

    public virtual DbSet<DoctorProgram> DoctorPrograms { get; set; }

    public virtual DbSet<DoctoralDegree> DoctoralDegrees { get; set; }

    public virtual DbSet<DoctorsSpecialization> DoctorsSpecializations { get; set; }

    public virtual DbSet<Log> Logs { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<NotificationMessageType> NotificationMessageTypes { get; set; }

    public virtual DbSet<Patient> Patients { get; set; }

    public virtual DbSet<Picture> Pictures { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Specialization> Specializations { get; set; }

    public virtual DbSet<StorageFile> StorageFiles { get; set; }

    public virtual DbSet<UnavailablePeriod> UnavailablePeriods { get; set; }

    public virtual DbSet<UnavailableReason> UnavailableReasons { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<VwDoctorList> VwDoctorLists { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_APPOINTMENT");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DateAndTime).HasColumnType("datetime");
            entity.Property(e => e.Price).HasDefaultValue(100);

            entity.HasOne(d => d.IdDoctorSpecializationsNavigation).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.IdDoctorSpecializations)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPOINTMENT_DOCTOR_PRICE");

            entity.HasOne(d => d.IdPacientNavigation).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.IdPacient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_APPOINTMENT_USER");
        });

        modelBuilder.Entity<AppointmentDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DOCUMENTS");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdAppointmentNavigation).WithMany(p => p.AppointmentDocuments)
                .HasForeignKey(d => d.IdAppointment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTS_APPOINTMENTS");

            entity.HasOne(d => d.IdFileNavigation).WithMany(p => p.AppointmentDocuments)
                .HasForeignKey(d => d.IdFile)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCUMENTS_FILES");
        });

        modelBuilder.Entity<AppointmentInfo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_INFO");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.InfoMessage).HasMaxLength(200);

            entity.HasOne(d => d.IdAppointmentNavigation).WithMany(p => p.AppointmentInfos)
                .HasForeignKey(d => d.IdAppointment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_INFO_APPOINTMENTS");
        });

        modelBuilder.Entity<Doctor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DOCTOR");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Doctor)
                .HasForeignKey<Doctor>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCTOR_USER");

            entity.HasOne(d => d.IdDegreesNavigation).WithMany(p => p.Doctors)
                .HasForeignKey(d => d.IdDegrees)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DOCTORS_DEGREES");
        });

        modelBuilder.Entity<DoctorProgram>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PROGRAM");

            entity.HasIndex(e => new { e.IdDoctor, e.DayOfWeek }, "UQ__DoctorPr__28359B3207E3964A").IsUnique();

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdDoctorNavigation).WithMany(p => p.DoctorPrograms)
                .HasForeignKey(d => d.IdDoctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PROGRAM_DOCTOR");
        });

        modelBuilder.Entity<DoctoralDegree>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DEGREES");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<DoctorsSpecialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_DOCTORSPECIALIZATIONS");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdDoctorNavigation).WithMany(p => p.DoctorsSpecializations)
                .HasForeignKey(d => d.IdDoctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DS_DOCTORS");

            entity.HasOne(d => d.IdSpecializationNavigation).WithMany(p => p.DoctorsSpecializations)
                .HasForeignKey(d => d.IdSpecialization)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DS_SPECIALIZATIONS");
        });

        modelBuilder.Entity<Log>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Logs__3214EC071E2F8E8B");

            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage).HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Logs)
                .HasForeignKey(d => d.CreatedBy)
                .HasConstraintName("FK_LOGS_USERS");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_NOTIFICATIONS");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IsDeleted).HasDefaultValue(false);
            entity.Property(e => e.IsRead).HasDefaultValue(false);
            entity.Property(e => e.NotifyDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdTypeNavigation).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.IdType)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTIFICATIONS_NOTIFICATION_TYPE");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.IdUser)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_NOTIFICATIONS_USERS");
        });

        modelBuilder.Entity<NotificationMessageType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_NOTIFICATION_TYPE");

            entity.ToTable("NotificationMessageType");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Message).HasMaxLength(500);
            entity.Property(e => e.Type).HasMaxLength(100);
        });

        modelBuilder.Entity<Patient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PACIENT");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Address).HasMaxLength(100);
            entity.Property(e => e.HealthIssues).HasMaxLength(500);

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.Patient)
                .HasForeignKey<Patient>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PACIENT_USER");
        });

        modelBuilder.Entity<Picture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_PICTURES");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdFileNavigation).WithMany(p => p.Pictures)
                .HasForeignKey(d => d.IdFile)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PICTURES_FILES");

            entity.HasOne(d => d.IdSpecializationNavigation).WithMany(p => p.Pictures)
                .HasForeignKey(d => d.IdSpecialization)
                .HasConstraintName("FK_PICTURES_SPECIALIZATIONS");

            entity.HasOne(d => d.IdUserNavigation).WithMany(p => p.Pictures)
                .HasForeignKey(d => d.IdUser)
                .HasConstraintName("FK_PICTURES_USERS");
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_REVIEWS");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ReviewMessage).HasMaxLength(200);

            entity.HasOne(d => d.IdAppointmentNavigation).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.IdAppointment)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVIEWS_APPOINTMENTS");

            entity.HasOne(d => d.IdPacientNavigation).WithMany(p => p.Reviews)
                .HasForeignKey(d => d.IdPacient)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_REVIEWS_PATIENTS");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Roles__3214EC07CE5D5E44");

            entity.Property(e => e.Name).HasMaxLength(50);
        });

        modelBuilder.Entity<Specialization>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_SPECIALIZATION");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<StorageFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__StorageF__3214EC077F36531D");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.FileName).HasMaxLength(250);
            entity.Property(e => e.FileType).HasMaxLength(250);
            entity.Property(e => e.FileUrl).HasMaxLength(250);
        });

        modelBuilder.Entity<UnavailablePeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_UNAVAILABLE");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdDoctorNavigation).WithMany(p => p.UnavailablePeriods)
                .HasForeignKey(d => d.IdDoctor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UNAVAILABLE_DOCTOR");

            entity.HasOne(d => d.IdReasonNavigation).WithMany(p => p.UnavailablePeriods)
                .HasForeignKey(d => d.IdReason)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UNAVAILABLE_REASON");
        });

        modelBuilder.Entity<UnavailableReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_REASON");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Reason).HasMaxLength(100);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK__Users__3214EC07C50A49DC");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedDate).HasColumnType("datetime");
            entity.Property(e => e.Email).HasMaxLength(250);
            entity.Property(e => e.FirstName).HasMaxLength(250);
            entity.Property(e => e.LastModifiedDate).HasColumnType("datetime");
            entity.Property(e => e.LastName).HasMaxLength(250);
            entity.Property(e => e.Password).HasMaxLength(250);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.InverseCreatedByNavigation)
                .HasForeignKey(d => d.CreatedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_CB");

            entity.HasOne(d => d.LastModifiedByNavigation).WithMany(p => p.InverseLastModifiedByNavigation)
                .HasForeignKey(d => d.LastModifiedBy)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_LM");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_USERS_ROLES");
        });

        modelBuilder.Entity<VwDoctorList>(entity =>
        {
            entity
                .HasNoKey()
                .ToView("VwDoctorList");

            entity.Property(e => e.DegreeName).HasMaxLength(100);
            entity.Property(e => e.FirstName).HasMaxLength(250);
            entity.Property(e => e.LastName).HasMaxLength(250);
            entity.Property(e => e.SpecializationName).HasMaxLength(100);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}